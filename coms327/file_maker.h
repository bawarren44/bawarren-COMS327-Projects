#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "change.h"

/**
 *Author: Brad Warren
 *Id Number:184030907
 *Email: bawarren@iastate.edu
 */

/**
 * Writes to a file in human readable form. File name specified in the parameter as a char pointer.
 */
void outputFileH(char* filename){
    FILE* file;

    //Opens the file with the given file name
    file = fopen(filename, "w");
    if(file ==NULL){
        fprintf(stderr, "Error opening file!\n");
        exit(1);
    }

    fprintf(file, "    a   b   c   d   e   f   g   h\n");
    int count = 0;
    int number = 8;
    int inCount = 0;
    int outCount = 0;
    int nextCount = 0;

    while(count < 17){
        if(count %2 != 0){
            fprintf(file, "%d ", number);
            while (nextCount < 1){
                fputc('|', file);
                fputc(' ', file);
                fputc(boardF[outCount][inCount], file);
                fputc(' ', file);
                inCount++;
                if(inCount == 8){
                    fputc('|', file);
                    fprintf(file, " %d",number);
                    fputc('\n', file);
                    nextCount++;
                    outCount++;
                    inCount = 0;
                }
            }
            nextCount = 0;
            number--;
        }else{
            fprintf(file, "  +---+---+---+---+---+---+---+---+\n");
        }
        count++;
    }
    fprintf(file, "    a   b   c   d   e   f   g   h\n\n");
    if(illgalMoveListIdx != 0){
        count = 0;
        while(count < illgalMoveListIdx){
            fprintf(file, "%s\n", illegalMoveList[count]);
            count++;
        }
    }
}


/**
 * Writes to a file in exchange form. File name in the parameter as a pointer. Pointer to list of commands made for command print out purposes.
 */
void outputFileE(char* filename, char** commands){
    FILE* file;

    //Opens file with the given file name
    file = fopen(filename, "w");
    if(file ==NULL){
        fprintf(stderr, "Error opening file!\n");
        exit(1);
    }
    if(plTurn % 2 == 0){
        strcpy(pTurn, "red");
    }else{
        strcpy(pTurn, "black");
    }
    fprintf(file, "#\n# Automatically generated by running\n# ");
    int i = 0;
    while(commands[i]){
	    fprintf(file, "%s ", commands[i]);
	    i++;
    }
    fprintf(file, "\n#\n\nRULES:\n %s\n %s\nTURN:\n %s\nBOARD:\n", capture, jump, pTurn);
    fprintf(file, "-----------------\n");
    int count = 0;
    int nextCount = 0;

    while (nextCount < 8){
        fputc('|', file);
        fputc(boardF[nextCount][count], file);
        count++;
        if(count == 8){
            fputc('|', file);
            fputc('\n', file);
            nextCount++;
            count = 0;
        }
    }

    fprintf(file, "-----------------\n");
    fprintf(file, "MOVES: \n");
    if(illgalMoveListIdx != 0){
        count = 0;
        while(count < illgalMoveListIdx){
            fprintf(file, "%s \n", illegalMoveList[count]);
            count++;
        }
    }
}
